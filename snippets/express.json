{
  "xxx = require('xxx')": {
    "prefix": "⭕️ yyexp-re",
    "body": "const ${1} = require('${1:name}');$0"
  },
  "{ xxx } = require('xxx')": {
    "prefix": "⭕️ yyexp-re{}",
    "body": "const { $2 } = require('$1');$0"
  },
  "导入fs": {
    "prefix": "⭕️ yyexp-fs",
    "body": [
      "const fs = require('fs/promises');"
    ]
  },
  "导入Controller": {
    "prefix": "⭕️ yyexp-controller",
    "body": [
      "const module = require('@controller$1');"
    ]
  },
  "导入Const": {
    "prefix": "⭕️ yyexp-const",
    "body": [
      "const module = require('@const$1');"
    ]
  },
  "导入pipes": {
    "prefix": "⭕️ yyexp-pipes",
    "body": [
      "const module = require('@pipes$1');"
    ]
  },
  "导入Schema": {
    "prefix": "⭕️ yyexp-schema",
    "body": [
      "const module = require('@schema$1');"
    ]
  },
  "导入utils": {
    "prefix": "⭕️ yyexp-utils",
    "body": [
      "const module = require('@utils$1');"
    ]
  },
  "导入api": {
    "prefix": "⭕️ yyexp-api",
    "body": [
      "const module = require('@api$1');"
    ]
  },
  "导入script": {
    "prefix": "⭕️ yyexp-script",
    "body": [
      "const module = require('@script$1');"
    ]
  },
  "导入child_process": {
    "prefix": "⭕️ yyexp-child_process",
    "body": [
      "const util = require('util');",
      "const exec = util.promisify(require('child_process').exec);"
    ]
  },
  "导入lodash: _ = require('lodash')": {
    "prefix": "⭕️ yyexp-lodash",
    "body": [
      "const _ = require('lodash');"
    ]
  },
  "导入Rxjs": {
    "prefix": "⭕️ yyexp-rxjs",
    "body": [
      "const { Subject } = require('rxjs');",
      "const { map } = require('rxjs/operators');"
    ]
  },
  "mongo关联查询": {
    "prefix": "⭕️ yymongo.lookup",
    "body": [
      "{ $lookup: { from: 'xxx', localField: '_id', foreignField: '_id', as: 'docs' } }",
      "{ $unwind: { path: '$docs', preserveNullAndEmptyArrays: true } }"
    ]
  },
  "mongo游标查询": {
    "prefix": "⭕️ yymongo.cursor",
    "body": [
      "const cursor = await Model.find({}).cursor();",
      "for (let doc = await cursor.next(); doc != null; doc = await cursor.next()) {",
      "   $0",
      "}"
    ]
  },
  "express增删改查": {
    "prefix": "⭕️ yyexp.curd",
    "body": [
      "async function get${1:name}Items(req, res, next) {",
      "  const { page = 1 } = req.query;",
      "  ${1:name}.find()",
      "    .byPage(page)",
      "    .then(data => res.send(req.fn.ok(data)))",
      "    .catch(next);",
      "}",
      "",
      "async function add${1:name}(req, res, next) {",
      "  ${1:name}.create(req.body)",
      "    .then(data => res.send(req.fn.ok(data)))",
      "    .catch(next);",
      "}",
      "",
      "async function update${1:name}(req, res, next) {",
      "  const { _id } = req.body;",
      "  ${1:name}.updateOne({ _id }, req.body)",
      "    .then(data => res.send(req.fn.ok(data)))",
      "    .catch(next);",
      "}",
      "",
      "async function delete${1:name}(req, res, next) {",
      "  const { _id } = req.body;",
      "  ${1:name}.deleteOne({ _id })",
      "    .then(data => res.send(req.fn.ok(data)))",
      "    .catch(next);",
      "}"
    ]
  },
  "Express函数": {
    "prefix": "⭕️ yyexp.module",
    "body": [
      "async function ${TM_FILENAME_BASE}() {",
      "  $0",
      "}",
      "",
      "module.exports = ${TM_FILENAME_BASE};"
    ]
  },
  "Express 响应": {
    "prefix": "⭕️ yyexp.response",
    "body": [
      ".then(data => res.send(req.fn.ok(data)))",
      ".catch(next);"
    ]
  },
  "Express.路由处理函数": {
    "prefix": "⭕️ yyexp.func",
    "body": [
      "async function ${1}(req, res, next) {",
      "   $0",
      "}"
    ]
  },
  "Express.路由": {
    "prefix": "⭕️ yyexp.get",
    "body": [
      "router.get('/${TM_FILENAME_BASE}/$1', ${2:name});"
    ]
  },
  "Express.路由post": {
    "prefix": "⭕️ yyexp.post",
    "body": [
      "router.post('/${TM_FILENAME_BASE}/$1', ${2:name});"
    ]
  },
  "Express 导出路由": {
    "prefix": "⭕️ yyexp.router",
    "body": [
      "const router = require('express').Router();",
      "",
      "$0",
      "",
      "module.exports = router;"
    ]
  },
  "Express中间件-2箭头函数": {
    "prefix": "⭕️ yyexp.middleware",
    "body": [
      "const ${1:name} = (req, res, next) => {",
      "  $0",
      "  next();",
      "};"
    ]
  },
  "Express.捕获错误": {
    "prefix": "⭕️ yyexp.next.error",
    "body": [
      "try {",
      "  $0",
      "} catch (err) {",
      " return next(new Error(err))",
      "}"
    ]
  },
  "Express发送成功": {
    "prefix": "⭕️ yyexp.ok",
    "body": [
      "res.send(req.fn.ok($0))"
    ]
  },
  "Express发送失败": {
    "prefix": "⭕️ yyexp.fail",
    "body": [
      "res.send(req.fn.error($0))"
    ]
  }
}