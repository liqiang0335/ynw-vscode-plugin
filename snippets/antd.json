{
  "ant-getFieldDecorator": {
    "prefix": "getFieldDecorator",
    "body": ["getFieldDecorator"]
  },
  "ant-resetFields": {
    "prefix": "form.resetFields",
    "body": ["form.resetFields"]
  },
  "ant-setFieldsValue": {
    "prefix": "form.setFieldsValue",
    "body": ["form.setFieldsValue"]
  },
  "ant-validateFields": {
    "prefix": "form.validateFields",
    "body": ["form.validateFields"]
  },
  "Antd: 弹窗": {
    "prefix": "ant.modal",
    "body": [
      "import React, { useEffect } from 'react';",
      "import { Modal, Form, Input, message } from 'antd';",
      "const FormItem = Form.Item;",
      "const ItemLayout = { labelCol: { span: 7 }, wrapperCol: { span: 15 } };",
      "",
      "/**",
      " * @param {Boolean} visible",
      " * @param {Function} onSuccess",
      " * @param {Function} onCancel",
      " */",
      "export default Form.create({})(${TM_FILENAME_BASE});",

      "function ${TM_FILENAME_BASE}(props) {",
      "  const { form, onCancel, onSuccess, visible } = props;",
      "  const { getFieldDecorator } = form;",

      "  const editor = state.editor;",
      "  const title = editor ? '修改' : '添加';",
      "  useEffect(() => {",
      "    if (editor) {",
      "      form.setFieldsValue({});",
      "    }",
      "  }, [editor]);",
      "",
      "  const onOk = () => {",
      "    form.validateFields(async (error, value) => {",
      "      if (error) return;",
      "      if (editor) {",
      "        value._id = state.editor._id;",
      "      }",
      "      console.log('>> value', value);",
      "      message.success('操作成功');",
      "      close();",
      "      onSuccess();",
      "    });",
      "  };",
      "",
      "  const close = () => {",
      "    state.editor = '';",
      "    form.resetFields();",
      "    onCancel();",
      "  };",
      "",
      "  return (",
      "    <Modal",
      "      title={`${title}标题`}",
      "      onOk={onOk}",
      "      onCancel={close}",
      "      visible={visible}",
      "    >",
      "      <Form>",
      "        <FormItem {...ItemLayout} label='标题'>",
      "          {getFieldDecorator('name')(<Input />)}",
      "        </FormItem>",
      "      </Form>",
      "    </Modal>",
      "  );",
      "}"
    ]
  },
  "Antd: 表格": {
    "prefix": "ant.table",
    "body": [
      "import React, { useEffect, useState } from 'react';",
      "import { Table, message, Modal } from 'antd';",
      "import checkSelectionCurry from 'ynw/checkSelectionCurry';",
      "import useToggle from 'ynw/react/useToggle';",
      "import useData from 'ynw/react/useData';",
      "",
      "export default function Account() {",
      "  const [data, setData] = useState({ total: 0, rows: [] });",
      "  const [query, setQuery] = useData({ page: 1 });",
      "  const [show, toggle] = useToggle(false);",
      "  const [selection, setSelection] = useState([]);",
      "  const checkSelection = checkSelectionCurry(selection, message.error);",
      "",
      "  useEffect(() => {",
      "    //",
      "  }, []);",
      "",
      "  const columns = [",
      "    { title: '名称', dataIndex: 'name', align: 'center', width: 250 }",
      "  ];",
      "",
      "  const rowSelection = {",
      "    type: 'radio',",
      "    onChange: keys => setSelection(keys)",
      "  };",

      "  const onRemove = async () => {",
      "    const key = await checkSelection(true);",
      "    Modal.confirm({",
      "      title: '确定要删除吗',",
      "      async onOk() {",
      "        message.success('操作成功');",
      "      }",
      "    });",
      "  };",
      "",
      "  const onEdit = async () => {",
      "    const key = await checkSelection(true);",
      "    state.editor = { ...data.find(item => item._id == key) };",
      "    toggle();",
      "  };",

      "  const onNew = () => {",
      "    state.editor = null;",
      "    toggle();",
      "  };",
      "",
      "  return (",
      "    <div className={styles.contaienr}>",
      "      <div>",
      "        <NewButton onClick={onNew} />",
      "        <EditButton onClick={onEdit} />",
      "        <DeleteButton onClick={onRemove} />",
      "      </div>",
      "      <Table",
      "        rowKey='_id'",
      "        dataSource={data.rows}",
      "        columns={columns}",
      "        bordered",
      "        rowSelection={rowSelection}",
      "        pagination={{",
      "          current: query.page,",
      "          total: data.total,",
      "          onChange: page => setQuery({ page })",
      "        }}",
      "        size='small'",
      "      />",
      "    </div>",
      "  );",
      "}",
      "",
      "function handler(arr) {",
      "  return arr.map(item => {",
      "    return item;",
      "  });",
      "}"
    ]
  }
}
