{
	"导入styled": {
		"prefix": "imstyled",
		"body": ["import styled from 'styled-components';"]
	},
	"导入rxjx": {
		"prefix": "iirxjs1",
		"body": [
			"import { Subject } from 'rxjs';",
			"import { map } from 'rxjs/operators'"
		]
	},
	"导入rxjs-hooks": {
		"prefix": "iirxjs2",
		"body": ["import { useEventCallback, useObservable } from 'rxjs-hooks'"]
	},
	"导入router": {
		"prefix": "iirouter",
		"body": ["import { useHistory, NavLink } from 'react-router-dom'"]
	},
	"导入useSelector ": {
		"prefix": "iiredux1",
		"body": ["import { useSelector } from 'react-redux'"]
	},
	"导入useDispatch": {
		"prefix": "iiredux2",
		"body": ["import { useDispatch } from 'react-redux'"]
	},
	"createSelector": {
		"prefix": "iiredux3",
		"body": [
			"import { createSelector } from 'reselect';",
			"",
			"export default createSelector(state => state.$1, Handler);",
			"",
			"function Handler($2) {",
			"  $0",
			"}"
		]
	},
	"useState": {
		"prefix": "iiuseState",
		"body": [
			"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
		]
	},
	"useEffect": {
		"prefix": "iiuseEffect",
		"body": ["useEffect(() => {", " $1", " },", "[]", ")"]
	},
	"行内样式": {
		"prefix": "iiclass",
		"body": "className={styles.$1} $2"
	},
	"imr": {
		"prefix": "iir",
		"body": ["import React from 'react'"]
	},
	"imd": {
		"prefix": "iid",
		"body": ["import ReactDOM from 'react-dom'"]
	},
	"classsNames": {
		"prefix": "iiclassnames",
		"body": "import m from 'classNames';"
	},
	"函数组件": {
		"prefix": "iirfc",
		"body": [
			"import React from 'react'",
			"",
			"export default function ${1:${TM_FILENAME_BASE}}() {",
			"  return (",
			"    <div>",
			"      ${TM_FILENAME_BASE}$0",
			"    </div>",
			"  )",
			"}",
			""
		]
	},
	"逻辑组件": {
		"prefix": "iiif",
		"description":"创建逻辑组件、useHook组件",
		"body": [
			"import React, { useReducer, useEffect } from 'react';",
			"import http from '@script/http';",
			"",
			"const initState = {};",
			"const reducer = (state, action) => {",
			"  return { ...state, ...action };",
			"};",
			"",
			"export default function ${TM_FILENAME_BASE}() {",
			"  const [state, dispatch] = useReducer(reducer, initState);",
			"",
			"  useEffect(() => {}, []);",
			"",
			"  return { state, dispatch }",
			"}"
		]
	},
	"useContext": {
		"prefix": "iiuseContext",
		"body": ["const ${1:context} = useContext(${2:contextValue})"]
	},
	"useReducer": {
		"prefix": "iiuseReducer",
		"body": [
			"const [state, dispatch] = useReducer(${1:reducer}, ${2:initState})"
		]
	},
	"useCallback": {
		"prefix": "iiuseCallback",
		"body": [
			"useCallback(",
			"  () => {",
			"    ${1:callback}",
			"  },",
			"  [${2:input}],",
			")"
		]
	},
	"useMemo": {
		"prefix": "iiuseMemo",
		"body": ["useMemo(() => ${1:function}, ${2:input})"]
	},
	"useRef": {
		"prefix": "iiuseRef",
		"body": ["const ${1:ref} = useRef(${2:initialValue})"]
	},
	"标签div": {
		"prefix": "iiv",
		"body": ["<div className={styles.$1}>$0</div>"]
	},
	"标签span": {
		"prefix": "iispan",
		"body": ["<span className={styles.$1}>$0</span>"]
	},
	"imrd": {
		"prefix": "iird",
		"body": [
			"import React from 'react'",
			"import ReactDOM from 'react-dom'",
			"",
			"",
			"const App = () => {",
			"  return (",
			"    <div>",
			"      <div>Hello</div>",
			"    </div>",
			"  )",
			"}",
			"",
			"ReactDOM.render(<App />, document.getElementById('app'))"
		]
	},
	"PropTypes": {
		"prefix": "iitypes",
		"body": [
			"import PropTypes from 'prop-types';",
			"",
			"//func,bool,element,any,enum,arrayOf",
			"${TM_FILENAME_BASE}.propTypes = {",
			"  number: PropTypes.number.isRequired,",
			"  customProp(props, propName, componentName) {}",
			"};"
		]
	},
	"导入SWR": {
		"prefix": "iiswr",
		"body": ["import useSWR from 'swr';"]
	},
	"创建styled": {
		"prefix": "ss",
		"body": ["const S$1 = styled.div`", "  $0", "`"]
	},
	"try-send": {
		"prefix": "eetry",
		"body": [
			"try {",
			"  const op = await $1.create(req.body);",
			"  req.ctx.sendData = op;",
			"  next();",
			"} catch (err) {",
			"  next(err);",
			"}"
		]
	},
	"try-next": {
		"prefix": "eetry",
		"body": ["try {", "  $1", "} catch (err) {", "  next(err);", "}"]
	},
	"try-throw": {
		"prefix": "iitry",
		"body": ["try {", "  $1", "} catch (err) {", "  throw new Erro(err);", "}"]
	},
	"分隔符": {
		"prefix": "iiii",
		"body": [
			"/**",
			" * ----------------------------------------",
			" * $0",
			" * ----------------------------------------",
			" */"
		]
	}
}