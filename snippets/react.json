{
  "==env.dev==": {
    "prefix": "iienv",
    "body": ["process.env.NODE_ENV ==\"development\""]
  },
  "==env.pro==": {
    "prefix": "iienv",
    "body": ["process.env.NODE_ENV ==\"production\""]
  },
  "==log1==": {
    "prefix": "iilog1",
    "body": ["console.log(\"$1\",$2)$0"]
  },
  "==log2==": {
    "prefix": "iilog2",
    "body": ["console.log($2)$0"]
  },
  "==log3==": {
    "prefix": "iilog3",
    "body": ["console.log(`%c ${$1}`,'background:blue;color:white')$0"]
  },
  "==useState==": {
    "prefix": "iiuseState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
    ]
  },
  "==useEffect==": {
    "prefix": "iiuseEffect",
    "body": ["useEffect(() => {", " $1", " },", "[]", ")"]
  },
  "classsNames2": {
    "prefix": "iiclass",
    "body": "className={styles.$1} $2"
  },
  "==Styled==": {
    "prefix": "iistyle",
    "body": "import styled from 'styled-components'"
  },
  "==imrd==": {
    "prefix": "iird",
    "body": [
      "import React from 'react'",
      "import ReactDOM from 'react-dom'",
      "",
      "",
      "const App = () => {",
      "  return (",
      "    <div>",
      "      <div>Hello</div>",
      "    </div>",
      "  )",
      "}",
      "",
      "ReactDOM.render(<App />, document.getElementById('app'))"
    ]
  },
  "==withRouter==": {
    "prefix": "iiwithRouter",
    "body": ["import { withRouter } from 'react-router-dom'"]
  },
  "==NavLink==": {
    "prefix": "iiNavLink",
    "body": ["import { NavLink } from 'react-router-dom'"]
  },
  "==import-connect==": {
    "prefix": "iiconnect",
    "body": ["import { connect } from 'react-redux'"]
  },
  "==redux-connect==": {
    "prefix": "iiconnect",
    "body": [
      "connect(",
      "    state => ({",
      "      key:state",
      "    })",
      " )(${TM_FILENAME_BASE})"
    ]
  },
  "==imr==": {
    "prefix": "iir",
    "body": ["import React from 'react'"]
  },
  "==imd==": {
    "prefix": "iid",
    "body": ["import { render } from 'react-dom'"]
  },
  "==classsNames==": {
    "prefix": "iinames",
    "body": "import classNames from 'classNames';"
  },
  "==import-module==": {
    "prefix": "iima",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "==import==": {
    "prefix": "iimb",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "==exportDefault==": {
    "prefix": "iiexp",
    "body": "export default $1$0"
  },
  "==reactFunctionalComponent==": {
    "prefix": "iirfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>",
      "      ${TM_FILENAME_BASE}$0",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "==useContext==": {
    "prefix": "iiuseContext",
    "body": ["const ${1:context} = useContext(${2:contextValue})"]
  },
  "==useReducer==": {
    "prefix": "iiuseReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "==useCallback==": {
    "prefix": "iiuseCallback",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ]
  },
  "==useMemo==": {
    "prefix": "iiuseMemo",
    "body": ["useMemo(() => ${1:function}, ${2:input})"]
  },
  "==useRef==": {
    "prefix": "iiuseRef",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"]
  },
  "==div==": {
    "prefix": "iiv",
    "body": ["<div className={styles.$1}>$0</div>"]
  },
  "==span==": {
    "prefix": "iispan",
    "body": ["<span className={styles.$1}>$0</span>"]
  },
  "==h1==": {
    "prefix": "iih1",
    "body": ["<h1 className={styles.$1}>$0</h1>"]
  },
  "==p==": {
    "prefix": "iip",
    "body": ["<p className={styles.$1}>$0</p>"]
  },
  "==button==": {
    "prefix": "iib",
    "body": ["<button className={styles.$1}>$0</button>"]
  },
  "==redux-combineActions==": {
    "prefix": "iicombineActions",
    "body": [" import { combineActions } from \"redux-actions\""]
  },
  "==redux-createAction==": {
    "prefix": "iicreateAction",
    "body": [" import { createAction, handleActions } from \"redux-actions\""]
  },
  "==redux-actions==": {
    "prefix": "iiredux-actions",
    "body": [
      "import { createAction, handleActions } from 'redux-actions'",
      "",
      "",
      "",
      "const initState = {}",
      "",
      "export default handleActions(",
      "  {",
      "    []: (state, { payload }) => {",
      "      return { ...state }",
      "    }",
      "  },",
      "  initState",
      ")"
    ]
  },
  "==redux-ob==": {
    "prefix": "iiepic",
    "body": [
      "import { from } from 'rxjs'",
      "import { switchMap, map, catchError } from 'rxjs/operators'",
      "import { ofType, combineEpics } from 'redux-observable'",
      "",
      "const epic = (action$, state$) =>",
      "  action$.pipe(",
      "    ofType(ACTION),",
      "    switchMap(({payload}) => from(api))",
      "  )"
    ]
  },
  "==redux-combineEpics==": {
    "prefix": "iicombineEpics",
    "body": [
      "import { combineEpics } from \"redux-observable\"",
      "",
      "export default combineEpics()"
    ]
  },
  "==dispatch1==": {
    "prefix": "iidispatch",
    "body": ["dispatch($1)$0"]
  },
  "==dispatch2==": {
    "prefix": "iidispatch",
    "body": ["const { dispatch } = props;"]
  },
  "==reducer1==": {
    "prefix": "iireducer",
    "body": ["[$1]: (state, { payload }) => ({ ...state, $2: payload }),"]
  },
  "==reducer2==": {
    "prefix": "iireducer",
    "body": [
      "[$1]: (state, { payload }) => ({",
      "      ...state,",
      "      $2: payload",
      "}),"
    ]
  },
  "==function==": {
    "prefix": "iifuncion",
    "body": ["const $1 = ($2) => {", " $0", "};"]
  },
  "==PropTypes==": {
    "prefix": "iitypes",
    "body": ["import PropTypes from 'prop-types';"]
  }
}
