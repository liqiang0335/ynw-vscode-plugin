{
	"⭕️ useSelector": {
		"prefix": "yy.useSelector",
		"body": [
			"const ${1:user} = useSelector(s => s.${1:user});"
		]
	},
	"⭕️ iird17": {
		"prefix": "yy.rd17",
		"body": [
			"import React from 'react'",
			"import ReactDOM from 'react-dom'",
			"",
			"",
			"const App = () => {",
			"  return (",
			"    <div>",
			"      <div>Hello</div>",
			"    </div>",
			"  )",
			"}",
			"",
			"ReactDOM.render(<App />, document.getElementById('app'))"
		]
	},
	"⭕️ next请求时渲染": {
		"prefix": "yy.next-server-props",
		"body": [
			"export async function getServerSideProps({ req, res, params, query}) {",
			"  res.setHeader('Cache-Control', 'public, s-maxage=600, stale-while-revalidate=59');",
			"",
			"  return {",
			"    props: {},",
			"  }",
			"}"
		]
	},
	"⭕️ next构建时渲染": {
		"prefix": "yy.next-static-props",
		"body": [
			"export async function getStaticProps({ req, res, params }) {",
			"  return {",
			"    props: {",
			"      datas: [],",
			"    },",
			"    revalidate: 3600,",
			"  };",
			"}"
		]
	},
	"⭕️ useKeyPress-使用": {
		"prefix": "yy.useKeyPress1",
		"body": [
			"useKeyPress('ctrl.alt.c', () => {",
			"  setCounter(s => s + 1);",
			"});"
		]
	},
	"⭕️ createSelector": {
		"prefix": "yy.createSelector",
		"body": [
			"import { createSelector } from 'reselect';",
			"",
			"export default createSelector(state => state.$1, Handler);",
			"",
			"function Handler($2) {",
			"  $0",
			"}"
		]
	},
	"⭕️ useState": {
		"prefix": "yy.useState",
		"body": [
			"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
		]
	},
	"⭕️ useEffect": {
		"prefix": "yy.useEffect",
		"body": [
			"useEffect(() => {",
			" $1",
			" },",
			"[]",
			")"
		]
	},
	"⭕️ 行内样式": {
		"prefix": "yy.className",
		"body": "className={styles.$1} $2"
	},
	"⭕️ 函数组件": {
		"prefix": "yy.rfc",
		"body": [
			"import React from 'react'",
			"",
			"export default function ${TM_FILENAME_BASE}() {",
			"  return (",
			"    <div>",
			"      ${TM_FILENAME_BASE}",
			"    </div>",
			"  )",
			"}",
			""
		]
	},
	"⭕️ 逻辑组件": {
		"prefix": "yy.rfc-logic",
		"description": "创建逻辑组件、useHook组件",
		"body": [
			"import React, { useReducer, useEffect } from 'react';",
			"import http from '@script/http';",
			"",
			"const initState = {};",
			"const reducer = (state, action) => {",
			"  return { ...state, ...action };",
			"};",
			"",
			"export default function ${TM_FILENAME_BASE}() {",
			"  const [state, dispatch] = useReducer(reducer, initState);",
			"",
			"  useEffect(() => {}, []);",
			"",
			"  return { state, dispatch }",
			"}",
			""
		]
	},
	"⭕️ useContext": {
		"prefix": "yy.useContext",
		"body": [
			"const ${1:context} = useContext(${2:contextValue})"
		]
	},
	"⭕️ useReducer": {
		"prefix": "yy.useReducer",
		"body": [
			"const [state, dispatch] = useReducer(${1:reducer}, ${2:initState})"
		]
	},
	"⭕️ iiuselogic": {
		"prefix": "yy.uselogic",
		"body": [
			"const props = useLogic();",
			"const { state, dispatch } = props;"
		]
	},
	"⭕️ useCallback": {
		"prefix": "yy.useCallback",
		"body": [
			"const ${1:fn} = useCallback(",
			"  () => {",
			"    ${0:callback}",
			"  },",
			"  [],",
			")"
		]
	},
	"⭕️ useMemo": {
		"prefix": "yy.useMemo",
		"body": [
			"useMemo(() => ${1:function}, ${2:input})"
		]
	},
	"⭕️ useRef": {
		"prefix": "yy.useRef",
		"body": [
			"const ${1:ref} = useRef(${2:initialValue})"
		]
	},
	"⭕️ 标签div": {
		"prefix": "yy.div",
		"body": [
			"<div className={styles.$1}>$0</div>"
		]
	},
	"⭕️ 标签span": {
		"prefix": "yy.span",
		"body": [
			"<span className={styles.$1}>$0</span>"
		]
	},
	"⭕️ iird": {
		"prefix": "yy.rd",
		"body": [
			"import React from 'react';",
			"import { createRoot } from 'react-dom/client';",
			"",
			"const App = () => {",
			"  return <div>Hello</div>;",
			"};",
			"",
			"createRoot(document.getElementById('app')).render(<App />);"
		]
	},
	"⭕️ iird-17": {
		"prefix": "yy.iird-17",
		"body": [
			"import React from 'react'",
			"import ReactDOM from 'react-dom'",
			"",
			"",
			"const App = () => {",
			"  return (",
			"    <div>",
			"      <div>Hello</div>",
			"    </div>",
			"  )",
			"}",
			"",
			"ReactDOM.render(<App />, document.getElementById('app'))"
		]
	},
	"⭕️ 类型注释PropTypes": {
		"prefix": "yy.proptypes",
		"body": [
			"import PropTypes from 'prop-types';",
			"",
			"// func,bool,string,object,element,any,arrayOf,oneOf([]),shape({})",
			"${TM_FILENAME_BASE}.propTypes = {",
			"  number: PropTypes.number.isRequired,",
			"  customProp(props, propName, componentName) {}",
			"};"
		]
	},
	"⭕️ 创建styled": {
		"prefix": "sss",
		"body": [
			"const S$1 = styled.div`",
			"  $0",
			"`"
		]
	}
}