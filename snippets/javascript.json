{
  "创建函数-async": {
    "prefix": "⭕️ yyfunc.async",
    "body": [
      "async function $1 (){",
      " $0",
      "}"
    ]
  },
  "创建函数": {
    "prefix": "⭕️ yyfunc",
    "body": [
      "function $1 (){",
      " $0",
      "}"
    ]
  },
  "当前文件名": {
    "prefix": "⭕️ yyfile",
    "body": " ${TM_FILENAME_BASE}"
  },
  "忽略格式化": {
    "prefix": "⭕️ yyignore",
    "body": [
      "// prettier-ignore"
    ]
  },
  "抛出异常": {
    "prefix": "⭕️ yytry",
    "body": [
      "try {",
      "  $1",
      "} catch (err) {",
      "  throw new Error(err);",
      "}"
    ]
  },
  "环境:开发": {
    "prefix": "⭕️ yyenvdev",
    "body": "process.env.NODE_ENV ==\"development\""
  },
  "环境:生产": {
    "prefix": "⭕️ yyenvpro",
    "body": "process.env.NODE_ENV ==\"production\""
  },
  "axios-基本": {
    "prefix": "⭕️ yyaxios",
    "body": [
      "import axios from 'axios';",
      "",
      "const http = axios.create({",
      "  baseURL: '/api',",
      "  timeout: 30000,",
      "  withCredentials: true,",
      "  headers: {",
      "    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',",
      "  },",
      "  transformRequest: params => new URLSearchParams(params).toString(),",
      "});",
      "",
      "export default http;"
    ]
  },
  "axios-拦截设置": {
    "prefix": "⭕️ yyaxios.use",
    "body": [
      "http.interceptors.request.use(onRequest);",
      "http.interceptors.response.use(onResponseSuccess, onResponseError);",
      "",
      "function onRequest(config) {",
      "  config.data = config.data || {};",
      "  config.params = config.params || {};",
      "  return config;",
      "}",
      "",
      "function onResponseSuccess(res) {",
      "  const body = res.data;",
      "  return body.data;",
      "}",
      "",
      "function onResponseError(err) {",
      "  if (err.response) {",
      "    const { config, status } = err.response;",
      "  }",
      "  return Promise.reject(err);",
      "}"
    ]
  }
}