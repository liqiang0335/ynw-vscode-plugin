{
  "⭕️ useCallback": {
    "prefix": "iiuseCallback",
    "body": [
      "const ${1:fn} = useCallback(",
      "  () => {",
      "    ${0:callback}",
      "  },",
      "  [],",
      ")"
    ]
  },
  "⭕️ next请求时渲染": {
    "prefix": "next-server-props",
    "body": [
      "export async function getServerSideProps({ req, res, params, query}) {",
      "  res.setHeader('Cache-Control', 'public, s-maxage=600, stale-while-revalidate=59');",
      "",
      "  return {",
      "    props: {},",
      "  }",
      "}"
    ]
  },
  "⭕️ next构建时渲染": {
    "prefix": "next-static-props",
    "body": [
      "export async function getStaticProps({ req, res, params }) {",
      "  return {",
      "    props: {",
      "      datas: [],",
      "    },",
      "    revalidate: 3600,",
      "  };",
      "}"
    ]
  },
  "⭕️ swr-导入": {
    "prefix": "imswr",
    "body": "import useSWR from 'swr';"
  },
  "⭕️ swr-请求": {
    "prefix": "useSWR",
    "body": "const { data = [] } = useSWR('$1')"
  },
  "⭕️ antd-页码配置": {
    "prefix": "antd-pagination",
    "body": [
      "pagination={{",
      "  showSizeChanger: false,",
      "  current: state.page,",
      "  total: state.total,",
      "  onChange(page) {",
      "    dispatch({ page });",
      "  },",
      "}}"
    ]
  },
  "⭕️ express-函数": {
    "prefix": "eemain",
    "body": [
      "async function main() {",
      "  $0",
      "}",
      "",
      "module.exports = main;"
    ]
  },
  "⭕️ 堆石配置文件": {
    "prefix": "damconfig",
    "body": [
      "const damconfig = require('@dam/config');"
    ]
  },
  "⭕️ 导入exec": {
    "prefix": "ee.re.child_process",
    "body": [
      "const util = require('util');",
      "const exec = util.promisify(require('child_process').exec);"
    ]
  },
  "⭕️ 导入fs": {
    "prefix": "exec",
    "body": [
      "const fs = require('fs/promises');"
    ]
  },
  "< comp />": {
    "prefix": "<<",
    "body": [
      "<$1 />"
    ]
  },
  "⭕️ 当前文件名": {
    "prefix": "iifile",
    "body": " ${TM_FILENAME_BASE} "
  },
  "⭕️ prettier-ignore": {
    "prefix": "ignore",
    "body": [
      "// prettier-ignore"
    ]
  },
  "⭕️ 导入rxjx": {
    "prefix": "iirxjs1",
    "body": [
      "import { Subject } from 'rxjs';",
      "import { map } from 'rxjs/operators'"
    ]
  },
  "⭕️ 导入rxjs-hooks": {
    "prefix": "iirxjs-hooks",
    "body": [
      "import { useEventCallback, useObservable } from 'rxjs-hooks'"
    ]
  },
  "⭕️ try-throw": {
    "prefix": "iitry",
    "body": [
      "try {",
      "  $1",
      "} catch (err) {",
      "  throw new Error(err);",
      "}"
    ]
  },
  "⭕️ 函数参数说明": {
    "prefix": "iiio",
    "body": [
      "/**",
      " * ----------------------------------------",
      " * $0",
      " * @param {String}",
      " * @returns {String}",
      " * ----------------------------------------",
      " */"
    ]
  },
  "⭕️ 代码注释": {
    "prefix": "iiii",
    "body": [
      "/**",
      " * ----------------------------------------",
      " * $0",
      " * ----------------------------------------",
      " */"
    ]
  },
  "⭕️ 公共脚本": {
    "prefix": "iiiscript",
    "body": [
      "import module from '@script$1';"
    ]
  },
  "⭕️ 公共Hooks": {
    "prefix": "iiihook",
    "body": [
      "import module  from '@hook$1';"
    ]
  },
  "⭕️ 公共组件": {
    "prefix": "iiicomps",
    "body": [
      "import module from '@comps$1';"
    ]
  },
  "⭕️ 公共常量": {
    "prefix": "iiiconst",
    "body": [
      "import module from '@const$1';"
    ]
  },
  "⭕️ reducer: initState": {
    "prefix": "initState",
    "body": [
      "const initState = {};",
      "const reducer = (state, action) => {",
      "  return {...state, ...action};",
      "}"
    ]
  },
  "⭕️ Vue函数": {
    "prefix": "ii.function.property",
    "body": [
      "$1() {",
      "  $2",
      "},"
    ]
  },
  "⭕️ 打印": {
    "prefix": "iiconsole",
    "body": [
      "console.log('🍎', $0)"
    ]
  },
  "⭕️ import dayjs": {
    "prefix": "iidayjs1",
    "body": [
      "import dayjs from 'dayjs';"
    ]
  },
  "⭕️ dayjs(time).format": {
    "prefix": "iidayjs2",
    "body": [
      "dayjs(time).format('YYYY-MM-DD HH:mm:ss')"
    ]
  },
  "⭕️ 防抖节流": {
    "prefix": "iidebounce",
    "body": [
      "debounce(function() {",
      "\t\t$1",
      "}, 1000, { leading: true, trailing: false })"
    ]
  },
  "⭕️ 环境:开发": {
    "prefix": "iienvdev",
    "body": "process.env.NODE_ENV ==\"development\""
  },
  "⭕️ 环境:生产": {
    "prefix": "iienvpro",
    "body": "process.env.NODE_ENV ==\"production\""
  },
  "⭕️ import xxx from xxx": {
    "prefix": "iim1",
    "body": "import ${1} from '${1:name}'"
  },
  "⭕️ import { xxx } from xxx": {
    "prefix": "iim2",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "⭕️ import * as xxx": {
    "prefix": "iim3",
    "body": "import * as $1 from '$2';$0"
  },
  "⭕️ xxx = require('xxx')": {
    "prefix": "iire1",
    "body": "const ${1} = require('${1:name}');$0"
  },
  "⭕️ { xxx } = require('xxx')": {
    "prefix": "iire2",
    "body": "const { $2 } = require('$1');$0"
  },
  "⭕️ 导入变量模块": {
    "prefix": "iire3",
    "body": "const { $2 } = $1;$0"
  },
  "⭕️ 导入Rxjs": {
    "prefix": "iirxcmd",
    "body": [
      "const { Subject } = require('rxjs');",
      "const { map } = require('rxjs/operators');"
    ]
  },
  "⭕️ 导入相关样式": {
    "prefix": "iims",
    "body": [
      "import ${1:styles} from './${TM_FILENAME_BASE}.scss';$0"
    ]
  },
  "⭕️ ES导入: import { $0 } from 'lodash-es'": {
    "prefix": "iilodash1",
    "body": [
      "import { $0 } from 'lodash-es';"
    ]
  },
  "⭕️ CMD全部: _ = require('lodash')": {
    "prefix": "iilodash2",
    "body": [
      "const _ = require('lodash');"
    ]
  },
  "⭕️ CMD按需: xxx = require('lodash/xxx')": {
    "prefix": "iilodash3",
    "body": [
      "const ${1} = require('lodash/${1}');"
    ]
  },
  "⭕️ 函数1": {
    "prefix": "iifuncion",
    "body": [
      "const $1 = ($2) => {",
      " $0",
      "};"
    ]
  },
  "⭕️ http.get": {
    "prefix": "httpget",
    "body": [
      "const params = {};",
      "http.get('$1',{ params }).then(res => {",
      "  console.log('返回数据', res);",
      "});"
    ]
  },
  "⭕️ http.post": {
    "prefix": "httppost",
    "body": [
      "const params = {};",
      "http.post('$1',params).then(res => {",
      "  console.log('返回数据', res);",
      "});"
    ]
  },
  "⭕️ 导入API": {
    "prefix": "iiapi",
    "body": [
      "import * as api from '@script/api';"
    ]
  },
  "⭕️ 导入immer": {
    "prefix": "immer",
    "body": [
      "import produce from 'immer';"
    ]
  },
  "⭕️ 我的Hub": {
    "prefix": "iihub",
    "body": [
      "import hub, { $1 } from '@store/hub';"
    ]
  },
  "⭕️ 注册V组件": {
    "prefix": "iivregister",
    "body": [
      "import Vue from 'vue';",
      "const comps = require.context('../comps', true, /\\.vue$/);",
      "const getCompPathName = path => {",
      "  const match = path.match(/\\w+?(?=\\/)/g);",
      "  if (!match) return '';",
      "  return match.map(item => item.replace(/\\//g, '')).join('-') + '-';",
      "};",
      "comps.keys().forEach(p => {",
      "  const name = p.match(/([\\w\\-]+)\\.vue$/)[1];",
      "  const folder = getCompPathName(p).toLowerCase();",
      "  const option = comps(p).default;",
      "  const final = 'yn-' + folder + name;",
      "  Vue.component(final, option);",
      "});"
    ]
  },
  "⭕️ next-link": {
    "prefix": "nextlink",
    "body": "import Link from 'next/link'"
  },
  "⭕️ next-image": {
    "prefix": "nextimage",
    "body": "import Image from 'next/image'"
  },
  "⭕️ next-router": {
    "prefix": "nextrouter",
    "body": "import { useRouter } from 'next/router'"
  },
  "⭕️ next-header": {
    "prefix": "nextheader",
    "body": "import Head from 'next/head'"
  },
  "⭕️ axios-base": {
    "prefix": "iiaxios1",
    "body": [
      "import axios from 'axios';",
      "import { notification, message } from 'antd';",
      "",
      "const http = axios.create({",
      "  baseURL: 'http://localhost:5000/api',",
      "  timeout: 60000,",
      "});",
      "export default http;"
    ]
  },
  "⭕️ axios-form": {
    "prefix": "iiaxios2",
    "body": [
      "import Qs from 'querystring';",
      "import axios from 'axios';",
      "import { notification, message } from 'antd';",
      "",
      "const http = axios.create({",
      "  baseURL: '/api',",
      "  timeout: 30000,",
      "  withCredentials: true,",
      "  headers: {",
      "    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',",
      "  },",
      "  transformRequest: params => Qs.stringify(params),",
      "});",
      "",
      "export default http;"
    ]
  },
  "⭕️ axios-use": {
    "prefix": "iiaxios_use",
    "body": [
      "http.interceptors.request.use(onRequest);",
      "http.interceptors.response.use(onResponseSuccess, onResponseError);",
      "",
      "function onRequest(config) {",
      "  config.data = config.data || {};",
      "  config.params = config.params || {};",
      "  return config;",
      "}",
      "",
      "function onResponseSuccess(res) {",
      "  const body = res.data;",
      "  if (body.code !== 1) {",
      "    notification.error({",
      "      placement: 'topRight',",
      "      duration: 5,",
      "      message: '出现错误',",
      "      description: body.message,",
      "    });",
      "    return Promise.reject(body.code);",
      "  }",
      "  return body.data;",
      "}",
      "",
      "function onResponseError(err) {",
      "  if (err.response) {",
      "    const { config, status } = err.response;",
      "    notification.error({",
      "      placement: 'topRight',",
      "      duration: 5,",
      "      message: `服务错误: ${status}`,",
      "      description: `${config.url}`,",
      "    });",
      "  }",
      "  if (err.code === 'ECONNABORTED') {",
      "    notification.error({",
      "      placement: 'bottomLeft',",
      "      duration: 5,",
      "      message: '请求超时',",
      "      description: `请确认网略连接是否正常`,",
      "    });",
      "  }",
      "  return Promise.reject(err);",
      "}"
    ]
  },
  "⭕️ HOOK数据": {
    "prefix": "iihookdata",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import http from '@script/http';",
      "/**",
      " * ----------------------------------------",
      " * DATA HOOK",
      " * ----------------------------------------",
      " */",
      "export default function ${TM_FILENAME_BASE}() {",
      "  const [data, setData] = useState([]);",
      "",
      "  useEffect(() => {}, []);",
      "",
      "  return data;",
      "}",
      ""
    ]
  }
}