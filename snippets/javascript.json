{
  "导入Store": {
    "prefix": "iiistore",
    "body": [
      "import store from '@store/store';"
    ]
  },
  "公共Types": {
    "prefix": "iiitypes",
    "body": [
      "import * as Types from '@store/Types';"
    ]
  },
  "公共脚本": {
    "prefix": "iiiscript",
    "body": [
      "import module from '@script/$1';"
    ]
  },
  "公共Hooks": {
    "prefix": "iiihook",
    "body": [
      "import module  from '@hook/$1';"
    ]
  },
  "公共组件": {
    "prefix": "iiicomps",
    "body": [
      "import module from '@comps/$1';"
    ]
  },
  "公共常量": {
    "prefix": "iiiconst",
    "body": [
      "import module from '@const/$1';"
    ]
  },
  "内部reducer": {
    "prefix": "iireducer",
    "body": [
      "const initState = {};",
      "const reducer = (state, action) => {",
      "  return {...state, ...action};",
      "}"
    ]
  },
  "Vue函数": {
    "prefix": "ii.function.property",
    "body": [
      "$1() {",
      "  $2",
      "},"
    ]
  },
  "Vue-mapstate": {
    "prefix": "ii.mapstate",
    "body": [
      "import { mapState } from 'vuex'"
    ]
  },
  "打印1-剪贴板": {
    "prefix": "iilog1",
    "body": [
      "console.log('打印数据: ${CLIPBOARD}', ${CLIPBOARD})"
    ]
  },
  "打印2": {
    "prefix": "iilog2",
    "body": [
      "console.log($1);"
    ]
  },
  "导入dayjs": {
    "prefix": "iidayjs1",
    "body": [
      "import dayjs from 'dayjs';"
    ]
  },
  "时间格式dayjs": {
    "prefix": "iidayjs2",
    "body": [
      "dayjs(time).format('YYYY-MM-DD HH:mm:ss')"
    ]
  },
  "防抖节流": {
    "prefix": "iidebounce",
    "body": [
      "debounce(function() {",
      "\t\t$1",
      "}, 1000, { leading: true, trailing: false })"
    ]
  },
  "环境:开发": {
    "prefix": "iienvdev",
    "body": "process.env.NODE_ENV ==\"development\""
  },
  "环境:生产": {
    "prefix": "iienvpro",
    "body": "process.env.NODE_ENV ==\"production\""
  },
  "导入模块": {
    "prefix": "iim1",
    "body": "import ${1} from '${1:name}"
  },
  "导入{*}模块": {
    "prefix": "iim2",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "导入*as模块": {
    "prefix": "iim3",
    "body": "import * as $1 from '$2';$0"
  },
  "CMD导入": {
    "prefix": "iire1",
    "body": "const ${1} = require('${1:name}');$0"
  },
  "CMD导入{}": {
    "prefix": "iire2",
    "body": "const { $2 } = require('$1');$0"
  },
  "导入变量模块": {
    "prefix": "iire3",
    "body": "const { $2 } = $1;$0"
  },
  "导入Rxjs.CMD": {
    "prefix": "iirxcmd",
    "body": [
      "const { Subject } = require('rxjs');",
      "const { map } = require('rxjs/operators');"
    ]
  },
  "导入相关样式": {
    "prefix": "iims",
    "body": [
      "import ${1:styles} from './${TM_FILENAME_BASE}.scss';$0"
    ]
  },
  "导入lodash模块": {
    "prefix": "iilodash",
    "body": [
      "import ${1:name} from 'lodash/${1}';$0"
    ]
  },
  "函数1": {
    "prefix": "iifuncion",
    "body": [
      "const $1 = ($2) => {",
      " $0",
      "};"
    ]
  },
  "http.get": {
    "prefix": "http.get",
    "body": [
      "const params = {};",
      "http.get('$1',{ params }).then(res => {",
      "  console.log('返回数据', res);",
      "});"
    ]
  },
  "http.post": {
    "prefix": "http.post",
    "body": [
      "const params = {};",
      "http.post('$1',params).then(res => {",
      "  console.log('返回数据', res);",
      "});"
    ]
  },
  "导入API": {
    "prefix": "iiapi",
    "body": [
      "import * as api from '@script/api';"
    ]
  },
  "导入immer": {
    "prefix": "immer",
    "body": [
      "import produce from 'immer';"
    ]
  },
  "我的Hub": {
    "prefix": "iihub",
    "body": [
      "import hub, { $1 } from '@store/hub';"
    ]
  },
  "注册V组件": {
    "prefix": "iivregister",
    "body": [
      "import Vue from 'vue';",
      "const comps = require.context('../comps', true, /\\.vue$/);",
      "const getCompPathName = path => {",
      "  const match = path.match(/\\w+?(?=\\/)/g);",
      "  if (!match) return '';",
      "  return match.map(item => item.replace(/\\//g, '')).join('-') + '-';",
      "};",
      "comps.keys().forEach(p => {",
      "  const name = p.match(/([\\w\\-]+)\\.vue$/)[1];",
      "  const folder = getCompPathName(p).toLowerCase();",
      "  const option = comps(p).default;",
      "  const final = 'yn-' + folder + name;",
      "  Vue.component(final, option);",
      "});"
    ]
  },
  "next-link": {
    "prefix": "nextlink",
    "body": "import Link from 'next/link'"
  },
  "next-image": {
    "prefix": "nextimage",
    "body": "import Image from 'next/image'"
  },
  "next-router": {
    "prefix": "nextrouter",
    "body": "import { useRouter } from 'next/router'"
  },
  "next-header": {
    "prefix": "nextheader",
    "body": "import Head from 'next/head'"
  },
  "AXIOS创建HTTP": {
    "prefix": "iiaxios1",
    "body": [
      "import { notification, message } from 'antd';",
      "import axios from 'axios';",
      "",
      "const http = axios.create({ baseURL: '/api', timeout: 30000 });",
      "export default http;",
      "",
      "http.interceptors.request.use(config => {",
      "  if (config.method === 'post') {",
      "    config.data = config.data || {};",
      "  }",
      "  if (config.method === 'get') {",
      "    config.params = config.params || {};",
      "  }",
      "  return config;",
      "});",
      "",
      "http.interceptors.response.use(",
      "  function(res) {",
      "    const body = res.data;",
      "    if (body.code == 1) {",
      "      return body.data;",
      "    } else {",
      "      message.error(body.message);",
      "      return Promise.reject();",
      "    }",
      "  },",
      "  function(err) {",
      "    if (err.response) {",
      "      const { config, status } = err.response;",
      "      notification.error({",
      "        placement: 'topRight',",
      "        duration: 6,",
      "        message: `服务错误: ${status}`,",
      "        description: `${config.url}`,",
      "      });",
      "    }",
      "    if (err.code === 'ECONNABORTED') {",
      "      notification.error({",
      "        placement: 'bottomLeft',",
      "        duration: 6,",
      "        message: '请求超时',",
      "        description: `请确认网略连接是否正常`,",
      "      });",
      "    }",
      "    return Promise.reject(err);",
      "  }",
      ");"
    ]
  },
  "AXIOS创建HTTP2": {
    "prefix": "iiaxios2",
    "body": [
      "import Qs from 'querystring';",
      "import axios from 'axios';",
      "import { message } from 'antd';",
      "",
      "const http = axios.create({",
      "  baseURL: '/api',",
      "  timeout: 30000,",
      "  withCredentials: true,",
      "  headers: {",
      "    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',",
      "  },",
      "  transformRequest: params => Qs.stringify(params),",
      "});",
      "",
      "export default http;",
      "",
      "http.interceptors.request.use(config => {",
      "  return config;",
      "});",
      "",
      "http.interceptors.response.use(",
      "  function (res) {",
      "    const body = res.data;",
      "    if (body.code != 1) {",
      "      message.error(body.message);",
      "      return Promise.reject(body);",
      "    }",
      "    return Promise.resolve(body.data);",
      "  },",
      "  function (err) {",
      "    if (err.code === 'ECONNABORTED') {",
      "      message.error('网络超时');",
      "    }",
      "    if (err.response) {",
      "      const res = err.response;",
      "      if (res.status == '500') {",
      "        message.error('服务器异常');",
      "      }",
      "    }",
      "    return Promise.reject(err);",
      "  }",
      ");"
    ]
  }
}